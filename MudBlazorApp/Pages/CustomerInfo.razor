@page "/"
@using MudBlazorApp.Data
@inject ICustomerService customerService
@inject MudBlazor.ISnackbar snackbar
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
    Add New Customer
</MudButton>
<MudTable Elevation="10" Items="GetAllCustomer()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customer List</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchstring" Placeholder="Search Customer..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.FirstName)" InitialDirection="SortDirection.Ascending">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.LastName)">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.PhoneNumber)">Phone Number</MudTableSortLabel></MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 20, 50, 100 }" />
    </PagerContent>
</MudTable>
<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<MudSwitch @bind-Checked="@striped" Color="Color.Tertiary">Striped</MudSwitch>
<MudSwitch @bind-Checked="@bordered" Color="Color.Warning">Bordered</MudSwitch>

@*This is our View Page. We can re use the component in any view page. Check out the below code*@
@*Here we added the Modal Component -- Start*@
@*Here we have attached all the parameter with the component*@
<Customer_PopUp 
                visible="@visible"
                OnClickCallback="@SaveCustomerInfo"
                customer="@customer"                
                ModalSubmitCallBack="@SubmitModal"
                ModalCancelCallBack="@CancelModal"/>

@*Modal Component -- End*@

@code{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private Customer customer = new Customer(); //Set the Parameter @customer
    private List<Customer> customers = new List<Customer>();

    private bool hover = true;
    private bool dense = true;
    private bool striped = true;
    private bool bordered = true;
    public string ButtonLabel = "";

    private bool visible = false; //Set the Parameter @visible
    private string searchstring = "";

    private void OpenDialog()
    {
        customer = new Customer();
        visible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GetAllCustomer();
        }
        catch (Exception)
        {
            Snackbar.Add("Error Occured..!", Severity.Error);
        }
    }

    private List<Customer> GetAllCustomer()
    {
        customers = customerService.GetCustomers();
        return customers;
    }

    private bool Search(Customer customer)
    {
        if (customer.FirstName != null && customer.LastName != null && customer.PhoneNumber != null &&
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)) ||
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)) ||
            (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }
        return false;
    }

    private void Edit(int Id)
    {
        try
        {
            customer = customers.FirstOrDefault(c => c.Id == Id);
            visible = true;
        }
        catch (Exception)
        {
            Snackbar.Add("Error Occured..!", Severity.Error);
        }
    }

    async Task Delete(int Id)
    {
        try
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete this row?");
            if (confirmed)
            {
                customerService.DeleteCustomer(Id);
                Snackbar.Add("Data Deleted Successfully..!", Severity.Success);
                GetAllCustomer();
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Data Deleted Failed..!", Severity.Error);
        }
    }

    public void SaveCustomerInfo() //Method for Parameter @SaveCustomerInfo
    {
        try
        {
            customerService.SaveCustomer(customer);

            if (ButtonLabel == "Update")
                Snackbar.Add("Data Update Successfully..!", Severity.Success);
            else
                Snackbar.Add("Data Save Successfully..!", Severity.Success);

            customer = new Customer();
            GetAllCustomer();
            visible = false;
        }
        catch (Exception)
        {
            Snackbar.Add("Data Process Failed..!", Severity.Error);
        }
    }

    void SubmitModal() => visible = false;  //Method for Parameter @SubmitModal
    void CancelModal() => visible = false;  //Method for Parameter @CancelModal
}